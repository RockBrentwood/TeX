// This file is part of CWEB.
// This program by Silvio Levy and Donald E. Knuth
// is based on a program by Knuth.
// It is distributed WITHOUT ANY WARRANTY, express or implied.
// Version 3.64 ― February 2017 (works also with later versions)

// Copyright (C) 1987, 1990, 1993 Silvio Levy and Donald E. Knuth

// Permission is granted to make and distribute verbatim copies of this
// document provided that the copyright notice and this permission notice
// are preserved on all copies.

// Permission is granted to copy and distribute modified versions of this
// document under the conditions for verbatim copying, provided that the
// entire resulting derived work is distributed under the terms of a
// permission notice identical to this one.

// Please send comments, suggestions, etc. to levy@math.berkeley.edu.

// The next few sections contain stuff from the file ≪"common.w"≫ that has
// to be included in both ≪"ctangle.w"≫ and ≪"cweave.w"≫. It appears in this
// file ≪"common.h"≫, which needs to be updated when ≪"common.w"≫ changes.

‡0: Common code for ‹CWEAVE› and ‹CTANGLE› (1/10)
First comes general stuff:

#define ctangle	0
#define cweave	1

≪≪‡0: Common code for ‹CWEAVE› and ‹CTANGLE›≫≫ =
typedef short boolean;
typedef char unsigned eight_bits;
extern boolean program;	// ‹CWEAVE› or ‹CTANGLE›?
extern int phase;	// which phase are we in?

‡1: Include files

≪≪‡1: Include files≫≫ =
#include <stdio.h>

‡2: Common code for ‹CWEAVE› and ‹CTANGLE› (2/10)
Code related to the character set:
//	⇔	ASCII code dependencies

#define and_and		0x04	// ‛‹&&›’; corresponds to MIT's {‹tentex›‹char›'4}
#define lt_lt		0x10	// ‛‹<<›’; corresponds to MIT's {‹tentex›‹char›'20}
#define gt_gt		0x11	// ‛‹>>›’; corresponds to MIT's {‹tentex›‹char›'21}
#define plus_plus	0x0b	// ‛‹++›’; corresponds to MIT's {‹tentex›‹char›'13}
#define minus_minus	0x01	// ‛‹--›’; corresponds to MIT's {‹tentex›‹char›'1}
#define minus_gt	0x19	// ‛‹->›’; corresponds to MIT's {‹tentex›‹char›'31}
#define not_eq		0x1a	// ‛‹!=›’; corresponds to MIT's {‹tentex›‹char›'32}
#define lt_eq		0x1c	// ‛‹<=›’; corresponds to MIT's {‹tentex›‹char›'34}
#define gt_eq		0x1d	// ‛‹>=›’; corresponds to MIT's {‹tentex›‹char›'35}
#define eq_eq		0x1e	// ‛‹==›’; corresponds to MIT's {‹tentex›‹char›'36}
#define or_or		0x1f	// ‛‹||›’; corresponds to MIT's {‹tentex›‹char›'37}
#define dot_dot_dot	0x0e	// ‛‹...›’; corresponds to MIT's {‹tentex›‹char›'16}
#define colon_colon	0x06	// ‛‹::›’; corresponds to MIT's {‹tentex›‹char›'6}
#define period_ast	0x16	// ‛‹.*›’; corresponds to MIT's {‹tentex›‹char›'26}
#define minus_gt_ast	0x17	// ‛‹->*›’; corresponds to MIT's {‹tentex›‹char›'27}

≪≪‡2: Common code...≫≫ =
char section_text[longest_name + 1];	// name being sought for
char *section_text_end = section_text + longest_name;	// end of ≪section_text≫
char *id_first;	// where the current identifier begins in the buffer
char *id_loc;	// just after the current identifier in the buffer

‡3: Common code for ‹CWEAVE› and ‹CTANGLE› (3/10)
Code related to input routines:

#define xisalpha(c)	(isalpha(c) ∧ (eight_bits)(c) < 0x80)
#define xisdigit(c)	(isdigit(c) ∧ (eight_bits)(c) < 0x80)
#define xisspace(c)	(isspace(c) ∧ (eight_bits)(c) < 0x80)
#define xislower(c)	(islower(c) ∧ (eight_bits)(c) < 0x80)
#define xisupper(c)	(isupper(c) ∧ (eight_bits)(c) < 0x80)
#define xisxdigit(c)	(isxdigit(c) ∧ (eight_bits)(c) < 0x80)

≪≪‡3: Common code...≫≫ =
extern char buffer[];		// where each line of input goes
extern char *buffer_end;	// end of ≪buffer≫
extern char *loc;		// points to the next character to be read from the buffer
extern char *limit;		// points to the last character in the buffer

‡4: Common code for ‹CWEAVE› and ‹CTANGLE› (4/10)
Code related to identifier and section name storage:
#define length(c)	(c + 1)→byte_start - (c)→byte_start	// the length of a name
#define print_id(c)	term_write((c)→byte_start, length((c)))	// print identifier
#define llink link		// left link in binary search tree for section names
#define rlink dummy.Rlink	// right link in binary search tree for section names
#define root name_dir→rlink	// the root of the binary search tree for section names
#define chunk_marker 0

≪≪‡4: Common code...≫≫ =
typedef struct name_info {
   char *byte_start;	// beginning of the name in ≪byte_mem≫
   struct name_info *link;
   union {
      struct name_info *Rlink;	// right link in binary search tree for section names
      char Ilk;	// used by identifiers in ‹CWEAVE› only
   } dummy;
   char *equiv_or_xref;	// info corresponding to names
} name_info;	// contains information about an identifier or section name
typedef name_info *name_pointer;	// pointer into array of «name_info»s
typedef name_pointer *hash_pointer;

extern char byte_mem[];			// characters of names
extern char *byte_mem_end;		// end of ≪byte_mem≫
extern char *byte_ptr;			// first unused position in ≪byte_mem≫

extern name_info name_dir[];		// information about names
extern name_pointer name_dir_end;	// end of ≪name_dir≫
extern name_pointer name_ptr;		// first unused position in ≪name_dir≫

extern name_pointer hash[];	// heads of hash lists
extern hash_pointer hash_end;	// end of ≪hash≫
extern hash_pointer h;		// index into hash-head array

extern name_pointer id_lookup(char *first, char *last, char t);	// looks up a string in the identifier table
extern name_pointer section_lookup(char *first, char *last, int ispref);	// finds section name
extern void print_section_name(name_pointer p);
extern void sprint_section_name(char *deast, name_pointer p);

‡5: Common code for ‹CWEAVE› and ‹CTANGLE› (5/10)
Code related to error handling:
#define spotless		0	// ≪history≫ value for normal jobs
#define harmless_message	1	// ≪history≫ value when non-serious info was printed
#define error_message		2	// ≪history≫ value when an error was noted
#define fatal_message		3	// ≪history≫ value when we had to stop prematurely

Editor's Note:
∙	These were orginally defined as macros.

¶
inline void mark_harmless(void) { if (history ≡ spotless) history = harmless_message; }
inline void mark_error(void) { history = error_message; }
inline void confusion(char *s) { fatal("! This can't happen: ", s); }

≪≪‡5: Common...≫≫ =
extern history;				// indicates how bad this run was
extern err_print(char *s);		// print error message and context
extern wrap_up(void);			// indicate ≪history≫ and exit
extern void fatal(char *s, char *t);	// issue error message and die
extern void overflow(char *t);		// succumb because a table has overflowed

‡6: Common code for ‹CWEAVE› and ‹CTANGLE› (6/10)
Code related to file handling:
#format line x	// make ≪line≫ an unreserved word
#define max_file_name_length 60
#define cur_file file[include_depth]	// current file
#define cur_file_name file_name[include_depth]	// current file name
#define web_file_name file_name[0]	// main source file name
#define cur_line line[include_depth]	// number of current line in current file

≪≪‡6: Common code...≫≫ =
extern include_depth;		// current level of nesting
extern FILE *file[];		// stack of non-change files
extern FILE *change_file;	// change file
extern char C_file_name[];	// name of ≪C_file≫
extern char tex_file_name[];	// name of ≪tex_file≫
extern char idx_file_name[];	// name of ≪idx_file≫
extern char scn_file_name[];	// name of ≪scn_file≫
extern char file_name[][max_file_name_length];	// stack of non-change file names
extern char change_file_name[];	// name of change file
extern line[];		// number of current line in the stacked files
extern change_line;	// number of current line in change file
extern change_depth;	// where ‹@y› originated during a change
extern boolean input_has_ended;	// if there is no more input
extern boolean changing;	// if the current line is from ≪change_file≫
extern boolean web_file_open;	// if the web file is being read
extern reset_input(void);	// initialize to read the web file and change file
extern get_line(void);		// inputs the next line
extern check_complete(void);	// checks that all changes were picked up

‡7: Common code for ‹CWEAVE› and ‹CTANGLE› (7/10)
Code related to section numbers:
≪≪‡7: Common code...≫≫ =
typedef unsigned short sixteen_bits;
extern sixteen_bits section_count;	// the current section number
extern boolean changed_section[];	// is the section changed?
extern boolean change_pending;	// is a decision about change still unclear?
extern boolean print_where;	// tells ‹CTANGLE› to print line and file info

‡8: Common code for ‹CWEAVE› and ‹CTANGLE› (8/10)
Code related to command line arguments:
#define show_banner flags['b']	// should the banner line be printed?
#define show_progress flags['p']	// should progress reports be printed?
#define show_happiness flags['h']	// should lack of errors be announced?

≪≪‡8: Common code...≫≫ =
extern int argc;	// copy of ≪ac≫ parameter to ≪main≫
extern char **argv;	// copy of ≪av≫ parameter to ≪main≫
extern boolean flags[];	// an option for each 7-bit code

‡9: Common code for ‹CWEAVE› and ‹CTANGLE› (9/10)
Code relating to output:
#define update_terminal() fflush(stdout)	// empty the terminal output buffer
#define new_line() putchar('\n')
#define putxchar putchar
#define term_write(a, b) fflush(stdout), fwrite(a, sizeof(char), b, stdout)
#define C_printf(c, a) fprintf(C_file, c, a)
#define C_putc(c) putc(c, C_file)

≪≪‡9: Common code...≫≫ =
extern FILE *C_file;	// where output of ‹CTANGLE› goes
extern FILE *tex_file;	// where output of ‹CWEAVE› goes
extern FILE *idx_file;	// where index from ‹CWEAVE› goes
extern FILE *scn_file;	// where list of sections from ‹CWEAVE› goes
extern FILE *active_file;	// currently active file for ‹CWEAVE› output

‡10: Common code for ‹CWEAVE› and ‹CTANGLE› (10/10)
The procedure that gets everything rolling:

≪≪‡10: Common code...≫≫ =
extern void common_init(void);
